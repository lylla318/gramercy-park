import re
import json
import io
import csv
import sys
from pprint import pprint
from collections import defaultdict
# import mysql.connector
# import MySQLdb
import time
import datetime
import urllib2
from bs4 import BeautifulSoup





class BIN_parser:


  def __init__(self):

    #bins
    bins = [1017861, 1017863, 1085463, 1017865, 1017866, 1017867, 1017868, 1080800, 1080801, 1017873, 1017874, 1017875, 1017876, 1017877, 1017878, 1017879, 1017880, 1078735, 1078736, 1017881, 1017882, 1018009, 1018008, 1078725, 1078734, 1018007, 1018006, 1018005, 1018004, 1018003, 1018002, 1089666, 1018019, 1018018, 1018017, 1018016, 1086513, 1086544, 1018014, 1018013, 1018032, 1018012, 1018010, 1017860, 1080798, 1017859, 1017858, 1017843, 1017857, 1018009, 1018008, 1078725, 1078734, 1018007, 1018006, 1018005, 1018004, 1018003, 1018002, 1089666, 1018010, 1018012, 1018032, 1018013, 1018014, 1086544, 1086513, 1018016, 1018017, 1018018, 1018019, 1089666, 1018000, 1017999, 1017998, 1017957, 1017958, 1017959, 1017960, 1017961, 1017962, 1076149, 1017885, 1017884, 1017883, 1017882, 1017857, 1017856, 1017855, 1017854, 1017853]

    reader = csv.reader(open("input/all_gramercy_facing.csv", 'rU'), delimiter=",", dialect=csv.excel_tab)
    for row in reader:
      print(type(row[0]))
      bins.append(row[0])

    self.csv_data = []

    for binno in bins:
     self.csv_data.append(self.scrape_goat(binno))

    self.write_output()


  def scrape_goat(self, binno):

    #print("Begin scraping...")
 
    url = "http://a030-goat.nyc.gov/goat/bn.aspx?allbin=" + binno
    page = urllib2.urlopen(url)
    soup = BeautifulSoup(page,  "html.parser")
    output = []

    #try:
    block = (soup.find("span", {"id": "label_tax_block_output"})).text
    lot = (soup.find("span", {"id": "label_tax_lot_output"})).text
    bbl = (soup.find("span", {"id": "label_bbl_output"})).text
    bin_no = (soup.find("span", {"id": "label_bin_output"})).text
    condo_no = (soup.find("span", {"id": "label_rapd_condo_num_output"})).text
    coop_no = (soup.find("span", {"id": "label_coop_num_output"})).text
    hnum_lo = 0
    hnum_hi = 0
    str_name = 0

    labels = soup.find("tr", {"class":"labels"})
    ctr = 0
    
    for elem in labels.findAll("td"):
      form = (elem.text).strip()
      if ctr == 1:
        hnum_lo = form
      elif ctr == 2:
        hnum_hi = form
      elif ctr == 3:
        str_name = form
      ctr += 1

    output = [bbl, block, lot, bin_no, hnum_lo, hnum_hi, str_name, condo_no, coop_no]

    #except:
    #  print("Error scraping data.")

    print(output)
    return output


  def write_output(self):

    csv_write = "output/gramercy_bins.csv"
    with open(csv_write,'w') as out:
      csv_out=csv.writer(out)
      for row in self.csv_data:
        csv_out.writerow(row)




class BBL_parser:

  def __init__(self, csv_read, csv_write):
    
    self.csv_data = []
    self.csv_read = csv_read
    self.csv_write = csv_write
    self.bbls = self.get_bbles()

    for row in self.bbls:
      self.csv_data.append(self.scrape_goat(row[0],row[1]))

    self.write_output()
    
    
  def get_bbles(self):

    bbls = []
    reader = csv.reader(open(self.csv_read, 'rU'), delimiter=",", dialect=csv.excel_tab)
    for row in reader:
      try:
        bble = row[0]
        block = int(bble[3:6])
        lot = int(bble[6:])
        bbls.append([block,lot])
      except:
        print("Could not parse.")

    return bbls

  def scrape_goat(self, block, lot):

    url = "http://a030-goat.nyc.gov/goat/bl.aspx?boro=1&block_num=" + str(block) + "&lot_num=" + str(lot)
    page = urllib2.urlopen(url)
    soup = BeautifulSoup(page,  "html.parser")
    output = []

    #try:
    block = (soup.find("span", {"id": "label_tax_block_output"})).text
    lot = (soup.find("span", {"id": "label_tax_lot_output"})).text
    bbl = (soup.find("span", {"id": "label_bbl_output"})).text
    bin_no = (soup.find("span", {"id": "label_bin_output"})).text
    condo_no = (soup.find("span", {"id": "label_rapd_condo_num_output"})).text
    coop_no = (soup.find("span", {"id": "label_coop_num_output"})).text
    hnum_lo = 0
    hnum_hi = 0
    str_name = 0

    labels = soup.find("tr", {"class":"labels"})
    ctr = 0
    
    for elem in labels.findAll("td"):
      form = (elem.text).strip()
      if ctr == 1:
        hnum_lo = form
      elif ctr == 2:
        hnum_hi = form
      elif ctr == 3:
        str_name = form
      ctr += 1

    output = [bbl, block, lot, bin_no, hnum_lo, hnum_hi, str_name, condo_no, coop_no]
    print(output)

    #except:
    #  print("Error scraping data.")

    print(output)
    return output


  def write_output(self):

    with open(self.csv_write,'w') as out:
      csv_out=csv.writer(out)
      csv_out.writerow(["bbl", "block", "lot", "bin_no", "hnum_lo", "hnum_hi", "str_name", "condo_no", "coop_no"])
      for row in self.csv_data:
        csv_out.writerow(row)


if __name__ == '__main__':

  csv_read = "input/all_stuyvesant.csv"
  csv_write = "output/stuyvesant_parcel_data.csv"
  p = BBL_parser(csv_read, csv_write)






